<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\debug.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\debug.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Oct 24 17:14:32 2022
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; dcd_config_device &rArr; GPIO_CFG_CpltCallback &rArr; GPIO_InitPeripheral
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from n32l40x_it.o(i.BusFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[40]">CAN_RX0_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[41]">CAN_RX1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[42]">CAN_SCE_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3f]">CAN_TX_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[20]">COMP_1_2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[15]">DMA_Channel1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[16]">DMA_Channel2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[17]">DMA_Channel3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[18]">DMA_Channel4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[19]">DMA_Channel5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1a]">DMA_Channel6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1b]">DMA_Channel7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1c]">DMA_Channel8_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from n32l40x_it.o(i.DebugMon_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from n32l40x_it.o(i.HardFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[45]">LCD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[44]">LPTIM_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3b]">LPUART_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[43]">LPUART_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[47]">MMU_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from n32l40x_it.o(i.MemManage_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from n32l40x_it.o(i.NMI_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[49]">RAMC_PERR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[46]">SAC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from n32l40x_it.o(i.SVC_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from n32l40x_it.o(i.SysTick_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_n32l40x.o(i.SystemInit) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3d]">TIM6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4a]">TIM9_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[48]">TSC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4b]">UCDR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1e]">USB_HP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1f]">USB_LP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from n32l40x_it.o(i.UsageFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[89]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[8d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[82]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTIM_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RAMC_PERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_read_check_header
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[93]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ConfigMRVoltage1V</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_n32l40x.o(i.ConfigMRVoltage1V))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FLASH_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
</UL>

<P><STRONG><a name="[84]"></a>FLASH_ClockInit</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, n32l40x_flash.o(i.FLASH_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>FLASH_EraseOnePage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, n32l40x_flash.o(i.FLASH_EraseOnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_earse_one_page
</UL>

<P><STRONG><a name="[59]"></a>FLASH_GetSTS</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_GetSTS))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[76]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_port_erase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_lock
</UL>

<P><STRONG><a name="[58]"></a>FLASH_ProgramWord</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, n32l40x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_program_word
</UL>

<P><STRONG><a name="[79]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_port_erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_unlock
</UL>

<P><STRONG><a name="[57]"></a>FLASH_WaitForLastOpt</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, n32l40x_flash.o(i.FLASH_WaitForLastOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSTS
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_CFG_CpltCallback</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, dcd_port.o(i.GPIO_CFG_CpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GPIO_CFG_CpltCallback &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, n32l40x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CFG_CpltCallback
</UL>

<P><STRONG><a name="[5b]"></a>GPIO_InitStruct</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CFG_CpltCallback
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CFG_CpltCallback
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CFG_CpltCallback
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RCC_CFG_CpltCallback</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dcd_port.o(i.RCC_CFG_CpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_CFG_CpltCallback &rArr; RCC_ConfigPll
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableHsi
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHse
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>

<P><STRONG><a name="[65]"></a>RCC_ConfigHclk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigHclk))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[63]"></a>RCC_ConfigHse</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigHse))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[67]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigPclk1))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[66]"></a>RCC_ConfigPclk2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigPclk2))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[68]"></a>RCC_ConfigPll</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, n32l40x_rcc.o(i.RCC_ConfigPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_ConfigPll
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[6b]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigSysclk))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[61]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[5c]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CFG_CpltCallback
</UL>

<P><STRONG><a name="[62]"></a>RCC_EnableHsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableHsi))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[69]"></a>RCC_EnablePll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnablePll))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[83]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, n32l40x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[6c]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_GetSysclkSrc))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[64]"></a>RCC_WaitHseStable</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, n32l40x_rcc.o(i.RCC_WaitHseStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitHseStable
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SoftReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, iap.o(i.SoftReset))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, system_n32l40x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32l40x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[95]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[96]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[73]"></a>af_calc_crc32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, af_utils.o(i.af_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = af_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_read_check_header
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_check
</UL>

<P><STRONG><a name="[6f]"></a>af_erase_upgrade_data_partition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, af_port.o(i.af_erase_upgrade_data_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = af_erase_upgrade_data_partition &rArr; af_port_erase &rArr; af_flash_earse_one_page &rArr; FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_port_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>af_flash_check</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, af_port.o(i.af_flash_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = af_flash_check &rArr; af_port_read
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_port_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>af_flash_earse_one_page</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, af_port.o(i.af_flash_earse_one_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = af_flash_earse_one_page &rArr; FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_port_erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>af_flash_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, af_port.o(i.af_flash_lock))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>af_flash_program_word</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, af_port.o(i.af_flash_program_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = af_flash_program_word &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>af_flash_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, af_port.o(i.af_flash_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>af_port_erase</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, af_port.o(i.af_port_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = af_port_erase &rArr; af_flash_earse_one_page &rArr; FLASH_EraseOnePage &rArr; FLASH_WaitForLastOpt
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_earse_one_page
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_erase_upgrade_data_partition
</UL>

<P><STRONG><a name="[72]"></a>af_port_read</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, af_port.o(i.af_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = af_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_port_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_check
</UL>

<P><STRONG><a name="[7a]"></a>dcd_config_device</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, dcd_user.o(i.dcd_config_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dcd_config_device &rArr; GPIO_CFG_CpltCallback &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CFG_CpltCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CFG_CpltCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_read_check_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>dcd_port_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dcd_port.o(i.dcd_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dcd_port_read &rArr; af_port_read
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_read_check_header
</UL>

<P><STRONG><a name="[7e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>

<P><STRONG><a name="[81]"></a>iap_load_app</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iap.o(i.iap_load_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iap_load_app
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 376 bytes, Stack size 576 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = main &rArr; dcd_config_device &rArr; GPIO_CFG_CpltCallback &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_unlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_program_word
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_lock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_earse_one_page
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_flash_check
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_erase_upgrade_data_partition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClockInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6d]"></a>SetSysClock</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, system_n32l40x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMRVoltage1V
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[86]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>dcd_read_check_header</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, dcd_user.o(i.dcd_read_check_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dcd_read_check_header &rArr; dcd_port_read &rArr; af_port_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_port_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_config_device
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
